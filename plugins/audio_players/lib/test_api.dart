// Copyright 2017 Luan Nico
// Copyright 2023 Toyota Connected North America
// 
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
// 
//      http://www.apache.org/licenses/LICENSE-2.0
// 
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
// Autogenerated from Pigeon (v9.2.5), do not edit directly.
// See also: https://pub.dev/packages/pigeon
// ignore_for_file: public_member_api_docs, non_constant_identifier_names, avoid_as, unused_import, unnecessary_parenthesis, unnecessary_import
// ignore_for_file: avoid_relative_lib_imports
import 'dart:async';
import 'dart:typed_data' show Float64List, Int32List, Int64List, Uint8List;
import 'package:flutter/foundation.dart' show ReadBuffer, WriteBuffer;
import 'package:flutter/services.dart';
import 'package:flutter_test/flutter_test.dart';

import 'messages.g.dart';

abstract class TestAudioPlayersApi {
  static TestDefaultBinaryMessengerBinding? get _testBinaryMessengerBinding => TestDefaultBinaryMessengerBinding.instance;
  static const MessageCodec<Object?> codec = StandardMessageCodec();

  Future<void> create(String playerId);

  Future<void> dispose(String playerId);

  Future<int?> getCurrentPosition(String playerId);

  Future<int?> getDuration(String playerId);

  Future<void> pause(String playerId);

  Future<void> release(String playerId);

  Future<void> resume(String playerId);

  Future<void> seek(String playerId, int position);

  Future<void> setBalance(String playerId, double balance);

  Future<void> setPlayerMode(String playerId, String playerMode);

  Future<void> setPlaybackRate(String playerId, double playbackRate);

  Future<void> setReleaseMode(String playerId, String releaseMode);

  Future<void> setSourceBytes(String playerId, Uint8List bytes);

  Future<void> setSourceUrl(String playerId, String url, bool isLocal);

  Future<void> setVolume(String playerId, double volume);

  Future<void> stop(String playerId);

  Future<void> emitLog(String playerId, String message);

  Future<void> emitError(String playerId, String code, String message);

  static void setup(TestAudioPlayersApi? api, {BinaryMessenger? binaryMessenger}) {
    {
      final BasicMessageChannel<Object?> channel = BasicMessageChannel<Object?>(
          'dev.flutter.pigeon.AudioPlayersApi.create', codec,
          binaryMessenger: binaryMessenger);
      if (api == null) {
        _testBinaryMessengerBinding!.defaultBinaryMessenger.setMockDecodedMessageHandler<Object?>(channel, null);
      } else {
        _testBinaryMessengerBinding!.defaultBinaryMessenger.setMockDecodedMessageHandler<Object?>(channel, (Object? message) async {
          assert(message != null,
          'Argument for dev.flutter.pigeon.AudioPlayersApi.create was null.');
          final List<Object?> args = (message as List<Object?>?)!;
          final String? arg_playerId = (args[0] as String?);
          assert(arg_playerId != null,
              'Argument for dev.flutter.pigeon.AudioPlayersApi.create was null, expected non-null String.');
          await api.create(arg_playerId!);
          return <Object?>[];
        });
      }
    }
    {
      final BasicMessageChannel<Object?> channel = BasicMessageChannel<Object?>(
          'dev.flutter.pigeon.AudioPlayersApi.dispose', codec,
          binaryMessenger: binaryMessenger);
      if (api == null) {
        _testBinaryMessengerBinding!.defaultBinaryMessenger.setMockDecodedMessageHandler<Object?>(channel, null);
      } else {
        _testBinaryMessengerBinding!.defaultBinaryMessenger.setMockDecodedMessageHandler<Object?>(channel, (Object? message) async {
          assert(message != null,
          'Argument for dev.flutter.pigeon.AudioPlayersApi.dispose was null.');
          final List<Object?> args = (message as List<Object?>?)!;
          final String? arg_playerId = (args[0] as String?);
          assert(arg_playerId != null,
              'Argument for dev.flutter.pigeon.AudioPlayersApi.dispose was null, expected non-null String.');
          await api.dispose(arg_playerId!);
          return <Object?>[];
        });
      }
    }
    {
      final BasicMessageChannel<Object?> channel = BasicMessageChannel<Object?>(
          'dev.flutter.pigeon.AudioPlayersApi.getCurrentPosition', codec,
          binaryMessenger: binaryMessenger);
      if (api == null) {
        _testBinaryMessengerBinding!.defaultBinaryMessenger.setMockDecodedMessageHandler<Object?>(channel, null);
      } else {
        _testBinaryMessengerBinding!.defaultBinaryMessenger.setMockDecodedMessageHandler<Object?>(channel, (Object? message) async {
          assert(message != null,
          'Argument for dev.flutter.pigeon.AudioPlayersApi.getCurrentPosition was null.');
          final List<Object?> args = (message as List<Object?>?)!;
          final String? arg_playerId = (args[0] as String?);
          assert(arg_playerId != null,
              'Argument for dev.flutter.pigeon.AudioPlayersApi.getCurrentPosition was null, expected non-null String.');
          final int? output = await api.getCurrentPosition(arg_playerId!);
          return <Object?>[output];
        });
      }
    }
    {
      final BasicMessageChannel<Object?> channel = BasicMessageChannel<Object?>(
          'dev.flutter.pigeon.AudioPlayersApi.getDuration', codec,
          binaryMessenger: binaryMessenger);
      if (api == null) {
        _testBinaryMessengerBinding!.defaultBinaryMessenger.setMockDecodedMessageHandler<Object?>(channel, null);
      } else {
        _testBinaryMessengerBinding!.defaultBinaryMessenger.setMockDecodedMessageHandler<Object?>(channel, (Object? message) async {
          assert(message != null,
          'Argument for dev.flutter.pigeon.AudioPlayersApi.getDuration was null.');
          final List<Object?> args = (message as List<Object?>?)!;
          final String? arg_playerId = (args[0] as String?);
          assert(arg_playerId != null,
              'Argument for dev.flutter.pigeon.AudioPlayersApi.getDuration was null, expected non-null String.');
          final int? output = await api.getDuration(arg_playerId!);
          return <Object?>[output];
        });
      }
    }
    {
      final BasicMessageChannel<Object?> channel = BasicMessageChannel<Object?>(
          'dev.flutter.pigeon.AudioPlayersApi.pause', codec,
          binaryMessenger: binaryMessenger);
      if (api == null) {
        _testBinaryMessengerBinding!.defaultBinaryMessenger.setMockDecodedMessageHandler<Object?>(channel, null);
      } else {
        _testBinaryMessengerBinding!.defaultBinaryMessenger.setMockDecodedMessageHandler<Object?>(channel, (Object? message) async {
          assert(message != null,
          'Argument for dev.flutter.pigeon.AudioPlayersApi.pause was null.');
          final List<Object?> args = (message as List<Object?>?)!;
          final String? arg_playerId = (args[0] as String?);
          assert(arg_playerId != null,
              'Argument for dev.flutter.pigeon.AudioPlayersApi.pause was null, expected non-null String.');
          await api.pause(arg_playerId!);
          return <Object?>[];
        });
      }
    }
    {
      final BasicMessageChannel<Object?> channel = BasicMessageChannel<Object?>(
          'dev.flutter.pigeon.AudioPlayersApi.release', codec,
          binaryMessenger: binaryMessenger);
      if (api == null) {
        _testBinaryMessengerBinding!.defaultBinaryMessenger.setMockDecodedMessageHandler<Object?>(channel, null);
      } else {
        _testBinaryMessengerBinding!.defaultBinaryMessenger.setMockDecodedMessageHandler<Object?>(channel, (Object? message) async {
          assert(message != null,
          'Argument for dev.flutter.pigeon.AudioPlayersApi.release was null.');
          final List<Object?> args = (message as List<Object?>?)!;
          final String? arg_playerId = (args[0] as String?);
          assert(arg_playerId != null,
              'Argument for dev.flutter.pigeon.AudioPlayersApi.release was null, expected non-null String.');
          await api.release(arg_playerId!);
          return <Object?>[];
        });
      }
    }
    {
      final BasicMessageChannel<Object?> channel = BasicMessageChannel<Object?>(
          'dev.flutter.pigeon.AudioPlayersApi.resume', codec,
          binaryMessenger: binaryMessenger);
      if (api == null) {
        _testBinaryMessengerBinding!.defaultBinaryMessenger.setMockDecodedMessageHandler<Object?>(channel, null);
      } else {
        _testBinaryMessengerBinding!.defaultBinaryMessenger.setMockDecodedMessageHandler<Object?>(channel, (Object? message) async {
          assert(message != null,
          'Argument for dev.flutter.pigeon.AudioPlayersApi.resume was null.');
          final List<Object?> args = (message as List<Object?>?)!;
          final String? arg_playerId = (args[0] as String?);
          assert(arg_playerId != null,
              'Argument for dev.flutter.pigeon.AudioPlayersApi.resume was null, expected non-null String.');
          await api.resume(arg_playerId!);
          return <Object?>[];
        });
      }
    }
    {
      final BasicMessageChannel<Object?> channel = BasicMessageChannel<Object?>(
          'dev.flutter.pigeon.AudioPlayersApi.seek', codec,
          binaryMessenger: binaryMessenger);
      if (api == null) {
        _testBinaryMessengerBinding!.defaultBinaryMessenger.setMockDecodedMessageHandler<Object?>(channel, null);
      } else {
        _testBinaryMessengerBinding!.defaultBinaryMessenger.setMockDecodedMessageHandler<Object?>(channel, (Object? message) async {
          assert(message != null,
          'Argument for dev.flutter.pigeon.AudioPlayersApi.seek was null.');
          final List<Object?> args = (message as List<Object?>?)!;
          final String? arg_playerId = (args[0] as String?);
          assert(arg_playerId != null,
              'Argument for dev.flutter.pigeon.AudioPlayersApi.seek was null, expected non-null String.');
          final int? arg_position = (args[1] as int?);
          assert(arg_position != null,
              'Argument for dev.flutter.pigeon.AudioPlayersApi.seek was null, expected non-null int.');
          await api.seek(arg_playerId!, arg_position!);
          return <Object?>[];
        });
      }
    }
    {
      final BasicMessageChannel<Object?> channel = BasicMessageChannel<Object?>(
          'dev.flutter.pigeon.AudioPlayersApi.setBalance', codec,
          binaryMessenger: binaryMessenger);
      if (api == null) {
        _testBinaryMessengerBinding!.defaultBinaryMessenger.setMockDecodedMessageHandler<Object?>(channel, null);
      } else {
        _testBinaryMessengerBinding!.defaultBinaryMessenger.setMockDecodedMessageHandler<Object?>(channel, (Object? message) async {
          assert(message != null,
          'Argument for dev.flutter.pigeon.AudioPlayersApi.setBalance was null.');
          final List<Object?> args = (message as List<Object?>?)!;
          final String? arg_playerId = (args[0] as String?);
          assert(arg_playerId != null,
              'Argument for dev.flutter.pigeon.AudioPlayersApi.setBalance was null, expected non-null String.');
          final double? arg_balance = (args[1] as double?);
          assert(arg_balance != null,
              'Argument for dev.flutter.pigeon.AudioPlayersApi.setBalance was null, expected non-null double.');
          await api.setBalance(arg_playerId!, arg_balance!);
          return <Object?>[];
        });
      }
    }
    {
      final BasicMessageChannel<Object?> channel = BasicMessageChannel<Object?>(
          'dev.flutter.pigeon.AudioPlayersApi.setPlayerMode', codec,
          binaryMessenger: binaryMessenger);
      if (api == null) {
        _testBinaryMessengerBinding!.defaultBinaryMessenger.setMockDecodedMessageHandler<Object?>(channel, null);
      } else {
        _testBinaryMessengerBinding!.defaultBinaryMessenger.setMockDecodedMessageHandler<Object?>(channel, (Object? message) async {
          assert(message != null,
          'Argument for dev.flutter.pigeon.AudioPlayersApi.setPlayerMode was null.');
          final List<Object?> args = (message as List<Object?>?)!;
          final String? arg_playerId = (args[0] as String?);
          assert(arg_playerId != null,
              'Argument for dev.flutter.pigeon.AudioPlayersApi.setPlayerMode was null, expected non-null String.');
          final String? arg_playerMode = (args[1] as String?);
          assert(arg_playerMode != null,
              'Argument for dev.flutter.pigeon.AudioPlayersApi.setPlayerMode was null, expected non-null String.');
          await api.setPlayerMode(arg_playerId!, arg_playerMode!);
          return <Object?>[];
        });
      }
    }
    {
      final BasicMessageChannel<Object?> channel = BasicMessageChannel<Object?>(
          'dev.flutter.pigeon.AudioPlayersApi.setPlaybackRate', codec,
          binaryMessenger: binaryMessenger);
      if (api == null) {
        _testBinaryMessengerBinding!.defaultBinaryMessenger.setMockDecodedMessageHandler<Object?>(channel, null);
      } else {
        _testBinaryMessengerBinding!.defaultBinaryMessenger.setMockDecodedMessageHandler<Object?>(channel, (Object? message) async {
          assert(message != null,
          'Argument for dev.flutter.pigeon.AudioPlayersApi.setPlaybackRate was null.');
          final List<Object?> args = (message as List<Object?>?)!;
          final String? arg_playerId = (args[0] as String?);
          assert(arg_playerId != null,
              'Argument for dev.flutter.pigeon.AudioPlayersApi.setPlaybackRate was null, expected non-null String.');
          final double? arg_playbackRate = (args[1] as double?);
          assert(arg_playbackRate != null,
              'Argument for dev.flutter.pigeon.AudioPlayersApi.setPlaybackRate was null, expected non-null double.');
          await api.setPlaybackRate(arg_playerId!, arg_playbackRate!);
          return <Object?>[];
        });
      }
    }
    {
      final BasicMessageChannel<Object?> channel = BasicMessageChannel<Object?>(
          'dev.flutter.pigeon.AudioPlayersApi.setReleaseMode', codec,
          binaryMessenger: binaryMessenger);
      if (api == null) {
        _testBinaryMessengerBinding!.defaultBinaryMessenger.setMockDecodedMessageHandler<Object?>(channel, null);
      } else {
        _testBinaryMessengerBinding!.defaultBinaryMessenger.setMockDecodedMessageHandler<Object?>(channel, (Object? message) async {
          assert(message != null,
          'Argument for dev.flutter.pigeon.AudioPlayersApi.setReleaseMode was null.');
          final List<Object?> args = (message as List<Object?>?)!;
          final String? arg_playerId = (args[0] as String?);
          assert(arg_playerId != null,
              'Argument for dev.flutter.pigeon.AudioPlayersApi.setReleaseMode was null, expected non-null String.');
          final String? arg_releaseMode = (args[1] as String?);
          assert(arg_releaseMode != null,
              'Argument for dev.flutter.pigeon.AudioPlayersApi.setReleaseMode was null, expected non-null String.');
          await api.setReleaseMode(arg_playerId!, arg_releaseMode!);
          return <Object?>[];
        });
      }
    }
    {
      final BasicMessageChannel<Object?> channel = BasicMessageChannel<Object?>(
          'dev.flutter.pigeon.AudioPlayersApi.setSourceBytes', codec,
          binaryMessenger: binaryMessenger);
      if (api == null) {
        _testBinaryMessengerBinding!.defaultBinaryMessenger.setMockDecodedMessageHandler<Object?>(channel, null);
      } else {
        _testBinaryMessengerBinding!.defaultBinaryMessenger.setMockDecodedMessageHandler<Object?>(channel, (Object? message) async {
          assert(message != null,
          'Argument for dev.flutter.pigeon.AudioPlayersApi.setSourceBytes was null.');
          final List<Object?> args = (message as List<Object?>?)!;
          final String? arg_playerId = (args[0] as String?);
          assert(arg_playerId != null,
              'Argument for dev.flutter.pigeon.AudioPlayersApi.setSourceBytes was null, expected non-null String.');
          final Uint8List? arg_bytes = (args[1] as Uint8List?);
          assert(arg_bytes != null,
              'Argument for dev.flutter.pigeon.AudioPlayersApi.setSourceBytes was null, expected non-null Uint8List.');
          await api.setSourceBytes(arg_playerId!, arg_bytes!);
          return <Object?>[];
        });
      }
    }
    {
      final BasicMessageChannel<Object?> channel = BasicMessageChannel<Object?>(
          'dev.flutter.pigeon.AudioPlayersApi.setSourceUrl', codec,
          binaryMessenger: binaryMessenger);
      if (api == null) {
        _testBinaryMessengerBinding!.defaultBinaryMessenger.setMockDecodedMessageHandler<Object?>(channel, null);
      } else {
        _testBinaryMessengerBinding!.defaultBinaryMessenger.setMockDecodedMessageHandler<Object?>(channel, (Object? message) async {
          assert(message != null,
          'Argument for dev.flutter.pigeon.AudioPlayersApi.setSourceUrl was null.');
          final List<Object?> args = (message as List<Object?>?)!;
          final String? arg_playerId = (args[0] as String?);
          assert(arg_playerId != null,
              'Argument for dev.flutter.pigeon.AudioPlayersApi.setSourceUrl was null, expected non-null String.');
          final String? arg_url = (args[1] as String?);
          assert(arg_url != null,
              'Argument for dev.flutter.pigeon.AudioPlayersApi.setSourceUrl was null, expected non-null String.');
          final bool? arg_isLocal = (args[2] as bool?);
          assert(arg_isLocal != null,
              'Argument for dev.flutter.pigeon.AudioPlayersApi.setSourceUrl was null, expected non-null bool.');
          await api.setSourceUrl(arg_playerId!, arg_url!, arg_isLocal!);
          return <Object?>[];
        });
      }
    }
    {
      final BasicMessageChannel<Object?> channel = BasicMessageChannel<Object?>(
          'dev.flutter.pigeon.AudioPlayersApi.setVolume', codec,
          binaryMessenger: binaryMessenger);
      if (api == null) {
        _testBinaryMessengerBinding!.defaultBinaryMessenger.setMockDecodedMessageHandler<Object?>(channel, null);
      } else {
        _testBinaryMessengerBinding!.defaultBinaryMessenger.setMockDecodedMessageHandler<Object?>(channel, (Object? message) async {
          assert(message != null,
          'Argument for dev.flutter.pigeon.AudioPlayersApi.setVolume was null.');
          final List<Object?> args = (message as List<Object?>?)!;
          final String? arg_playerId = (args[0] as String?);
          assert(arg_playerId != null,
              'Argument for dev.flutter.pigeon.AudioPlayersApi.setVolume was null, expected non-null String.');
          final double? arg_volume = (args[1] as double?);
          assert(arg_volume != null,
              'Argument for dev.flutter.pigeon.AudioPlayersApi.setVolume was null, expected non-null double.');
          await api.setVolume(arg_playerId!, arg_volume!);
          return <Object?>[];
        });
      }
    }
    {
      final BasicMessageChannel<Object?> channel = BasicMessageChannel<Object?>(
          'dev.flutter.pigeon.AudioPlayersApi.stop', codec,
          binaryMessenger: binaryMessenger);
      if (api == null) {
        _testBinaryMessengerBinding!.defaultBinaryMessenger.setMockDecodedMessageHandler<Object?>(channel, null);
      } else {
        _testBinaryMessengerBinding!.defaultBinaryMessenger.setMockDecodedMessageHandler<Object?>(channel, (Object? message) async {
          assert(message != null,
          'Argument for dev.flutter.pigeon.AudioPlayersApi.stop was null.');
          final List<Object?> args = (message as List<Object?>?)!;
          final String? arg_playerId = (args[0] as String?);
          assert(arg_playerId != null,
              'Argument for dev.flutter.pigeon.AudioPlayersApi.stop was null, expected non-null String.');
          await api.stop(arg_playerId!);
          return <Object?>[];
        });
      }
    }
    {
      final BasicMessageChannel<Object?> channel = BasicMessageChannel<Object?>(
          'dev.flutter.pigeon.AudioPlayersApi.emitLog', codec,
          binaryMessenger: binaryMessenger);
      if (api == null) {
        _testBinaryMessengerBinding!.defaultBinaryMessenger.setMockDecodedMessageHandler<Object?>(channel, null);
      } else {
        _testBinaryMessengerBinding!.defaultBinaryMessenger.setMockDecodedMessageHandler<Object?>(channel, (Object? message) async {
          assert(message != null,
          'Argument for dev.flutter.pigeon.AudioPlayersApi.emitLog was null.');
          final List<Object?> args = (message as List<Object?>?)!;
          final String? arg_playerId = (args[0] as String?);
          assert(arg_playerId != null,
              'Argument for dev.flutter.pigeon.AudioPlayersApi.emitLog was null, expected non-null String.');
          final String? arg_message = (args[1] as String?);
          assert(arg_message != null,
              'Argument for dev.flutter.pigeon.AudioPlayersApi.emitLog was null, expected non-null String.');
          await api.emitLog(arg_playerId!, arg_message!);
          return <Object?>[];
        });
      }
    }
    {
      final BasicMessageChannel<Object?> channel = BasicMessageChannel<Object?>(
          'dev.flutter.pigeon.AudioPlayersApi.emitError', codec,
          binaryMessenger: binaryMessenger);
      if (api == null) {
        _testBinaryMessengerBinding!.defaultBinaryMessenger.setMockDecodedMessageHandler<Object?>(channel, null);
      } else {
        _testBinaryMessengerBinding!.defaultBinaryMessenger.setMockDecodedMessageHandler<Object?>(channel, (Object? message) async {
          assert(message != null,
          'Argument for dev.flutter.pigeon.AudioPlayersApi.emitError was null.');
          final List<Object?> args = (message as List<Object?>?)!;
          final String? arg_playerId = (args[0] as String?);
          assert(arg_playerId != null,
              'Argument for dev.flutter.pigeon.AudioPlayersApi.emitError was null, expected non-null String.');
          final String? arg_code = (args[1] as String?);
          assert(arg_code != null,
              'Argument for dev.flutter.pigeon.AudioPlayersApi.emitError was null, expected non-null String.');
          final String? arg_message = (args[2] as String?);
          assert(arg_message != null,
              'Argument for dev.flutter.pigeon.AudioPlayersApi.emitError was null, expected non-null String.');
          await api.emitError(arg_playerId!, arg_code!, arg_message!);
          return <Object?>[];
        });
      }
    }
  }
}
