// Copyright 2013 The Flutter Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.
// Autogenerated from Pigeon (v10.1.6), do not edit directly.
// See also: https://pub.dev/packages/pigeon

#undef _HAS_EXCEPTIONS

#include "messages.g.h"

#include <flutter/basic_message_channel.h>
#include <flutter/binary_messenger.h>
#include <flutter/encodable_value.h>
#include <flutter/method_call.h>
#include <flutter/method_channel.h>
#include <flutter/standard_method_codec.h>

#include <optional>
#include <string>

namespace url_launcher_linux {
using flutter::BasicMessageChannel;
using flutter::CustomEncodableValue;
using flutter::EncodableList;
using flutter::EncodableMap;
using flutter::EncodableValue;

// Sets up an instance of `UrlLauncherApi` to handle messages through the
// `binary_messenger`.
void UrlLauncherApi::SetUp(flutter::BinaryMessenger* binary_messenger,
                           UrlLauncherApi* api) {
  {
    const auto channel = std::make_unique<flutter::MethodChannel<>>(
        binary_messenger, "plugins.flutter.io/url_launcher_linux",
        &flutter::StandardMethodCodec::GetInstance());
    if (api != nullptr) {
      channel->SetMethodCallHandler(
          [api](const flutter::MethodCall<EncodableValue>& call,
                const std::unique_ptr<flutter::MethodResult<EncodableValue>>&
                    result) {
            const auto args =
                std::get_if<flutter::EncodableMap>(call.arguments());

            if ("canLaunch" == call.method_name()) {
              std::string url_arg;
              const auto it = args->find(flutter::EncodableValue("url"));
              if (it != args->end() && !it->second.IsNull()) {
                url_arg = std::get<std::string>(it->second);
              }
              if (url_arg.empty()) {
                result->Error("url_arg unexpectedly null.");
                return;
              }
              const ErrorOr<bool> output = api->CanLaunchUrl(url_arg);
              if (output.has_error()) {
                result->Error(output.error().code(), output.error().message());
                return;
              }
              result->Success(true);
            } else if ("launch" == call.method_name()) {
              std::string url_arg;
              const auto it = args->find(flutter::EncodableValue("url"));
              if (it != args->end() && !it->second.IsNull()) {
                url_arg = std::get<std::string>(it->second);
              }
              if (url_arg.empty()) {
                result->Error("url_arg unexpectedly null.");
                return;
              }
              const std::optional<FlutterError> output =
                  api->LaunchUrl(url_arg);
              if (output.has_value()) {
                result->Success(WrapError(output.value()));
                return;
              }
              result->Success(true);
            } else {
              result->Error("unimplemented");
            }
          });
    }
  }
}

EncodableValue UrlLauncherApi::WrapError(std::string_view error_message) {
  return EncodableValue(
      EncodableList{EncodableValue(std::string(error_message)),
                    EncodableValue("Error"), EncodableValue()});
}

EncodableValue UrlLauncherApi::WrapError(const FlutterError& error) {
  return EncodableValue(EncodableList{EncodableValue(error.code()),
                                      EncodableValue(error.message()),
                                      error.details()});
}

}  // namespace url_launcher_linux
